name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6.0
        options: >-
          --health-cmd "mongo --eval 'db.adminCommand('ping')'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 27017:27017
    env:
      MONGO_INITDB_ROOT_USERNAME: "root"
      MONGO_INITDB_ROOT_PASSWORD: "example"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Wait for MongoDB to become healthy
        run: |
          echo "Waiting for MongoDB to become healthy..."
          for i in {1..20}; do
            mongo admin -u admin -p admin123 --eval "db.runCommand({ connectionStatus: 1 })" && break
            echo "Retrying MongoDB connection..."
            sleep 3
          done

      - name: Run MongoDB connectivity test
        run: |
          echo "Running MongoDB connectivity test..."
          mongo admin -u admin -p admin123 --eval "db.stats()"

      - name: Run SonarQube Analysis (Backend)
        uses: sonarsource/sonarqube-scan-action@v1.2
        with:
          projectBaseDir: ./backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://127.0.0.1:9000

      - name: Run SonarQube Analysis (Frontend)
        uses: sonarsource/sonarqube-scan-action@v1.2
        with:
          projectBaseDir: ./frontend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://127.0.0.1:9000

      - name: Build and push backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: nileshc8890/wanderlust-backend:latest

      - name: Build and push frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: nileshc8890/wanderlust-frontend:latest

      - name: Trivy Scan - Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nileshc8890/wanderlust-backend:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Trivy Scan - Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: nileshc8890/wanderlust-frontend:latest
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: visiontech-aks
          resource-group: VisionTechRG1

      - name: Deploy to AKS
        run: |
          kubectl apply -f kubernetes/
